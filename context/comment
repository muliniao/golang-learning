0. 源码: 非常重要, 必须搞懂
    0.1 Context类型是一个可以帮助我们实现多 goroutine 协作流程的同步工具。不但如此，我们还可以通过此类型的值传达撤销信号或传递数据

1. 种类
    1.1 根节点 context: context.background()
    1.2 cancel context
        1.2.1 手动撤销: cancel
        1.2.2 自动撤销: timeout, deadline
    1.3 value context

2. 方法
    2.1 WithCancel
    2.2 WithDeadline
    2.3 WithTimeout
    2.4 WithValue

3. Context err
    3.1 手动撤销: context.Canceled---message is "context canceled"
    3.2 自动撤销: context.DeadlineExceeded---message is "context deadline exceeded"

4. Cancel信号如何在上下文中传播
    4.1 撤销信号总是会沿着上下文树叶子节点的方向传播开来
    4.2 从源码级别上说, 通过调用context.WithValue函数得到的Context值是不可撤销的。撤销信号在被传播时，若遇到它们则会直接跨过，并试图将信号直接传给它们的子值
        在value节点上的Done()在源码级别实际上调用的并不是value节点自己的方法，而是它上级节点（甚至上上级）的方法

5. 如何获取context中携带的数据
    5.1 采用逐层向上寻找Key
    5.2 遇到其他撤销类型context,直接跨过
    5.3 例子
        u, ok := ctx.Value(userKey).(*User)
        if ok {
            return u
        }

6. context.background和context.todo()的区别
    6.1 context.background(): 返回全局上下文根
    6.2 context.todo(): 返回空的上下文
